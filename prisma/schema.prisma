

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id        String  @id
  username  String  @unique
  name      String
  surname   String
  email     String?  @unique
  phone     String?  @unique
  address   String
  image     String?
  bloodType String
  sex    UserSex
  createdAt DateTime @default(now())
  parentId String
  parent   Parent @relation(fields: [parentId], references: [id])
  classId Int
  class Class @relation(fields: [classId], references: [id])
  gradeId Int
  grade Grades @relation(fields: [gradeId], references: [id])
  attendance Attendance[]
  results Result[]

}

model Parent {
  id        String  @id
  username  String  @unique
  name      String
  surname   String
  email     String? @unique
  phone     String @unique
  address   String
  createdAt DateTime @default(now())
  students Student[]
}
model Teacher {
  id        String  @id
  username  String  @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?  @unique
  address   String
  image     String?
  bloodType String
  sex    UserSex
  createdAt DateTime @default(now())
  subjects Subject[]
  lessons Lesson[]
  classes Class[]
 
}
model Subject {
  id    Int @id @default(autoincrement())
  name  String
  Teacher Teacher[]
  lessons Lesson[]
}
model Lesson {
  id     Int @id @default(autoincrement())
  name   String
  day    Day
  start  DateTime
  end    DateTime
  subjectId Int
  subject Subject @relation(fields: [subjectId], references: [id])
  classId   Int
  class Class @relation(fields: [classId], references: [id])
  teacherId String
  teacher Teacher @relation(fields: [teacherId], references: [id])
  Exams Exam[]
  Assignments Assignment[]
  Attendance Attendance[]
}
model Class {
  id  Int @id @default(autoincrement())
  name String @unique
  capacity Int
  lessons Lesson[]
  supervisorId String
  supervisor Teacher @relation(fields: [supervisorId], references: [id])
  students Student[]
  gradeId Int
  grade Grades @relation(fields: [gradeId], references: [id])
  announcements Announcement[]
  events Event[]
 

}
model Grades  {
  id  Int  @id @default(autoincrement())
  level  Int
  classes Class[]
  students Student[]
}

model Exam {
    id Int @id @default(autoincrement())
  title String
  start  DateTime
  end    DateTime
  lessonId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
  results Result[]

}
model Assignment {
  id Int @id @default(autoincrement())
  title String
  startDate  DateTime
dueDate    DateTime
lessonId Int
lesson Lesson @relation(fields: [lessonId], references: [id])
  results Result[]
}
model Result {
  id Int  @id @default(autoincrement())
  score Int
  assignmentId Int?
  assignment Assignment? @relation(fields: [assignmentId], references: [id])
  examId Int?
  exam Exam? @relation(fields: [examId], references: [id])
  studentId String
  student Student @relation(fields: [studentId], references: [id])
}

model Attendance {
  id Int @id @default(autoincrement())
  date DateTime
  present String

  lessonId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
  studentId String
  student Student @relation(fields: [studentId], references: [id])

}
model Announcement {
  id Int @id @default(autoincrement())
  title String
  description String
  classId Int?
  class Class? @relation(fields: [classId], references: [id])
  date DateTime
}
model Event {
    id Int @id @default(autoincrement())
  title String
  description String
  classId Int?
  class Class? @relation(fields: [classId], references: [id])
  startDate DateTime
  endDate DateTime
}



enum UserSex  {
  Male
  Famale
}

enum Day {
  Sunday
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
}